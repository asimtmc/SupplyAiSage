


AI-Powered Demand Forecasting
This module uses advanced AI algorithms to generate accurate demand forecasts for your products. The system automatically clusters SKUs by sales patterns, selects the best forecasting model for each, and provides confidence intervals for risk-aware planning.

SKU Cluster Analysis
Cluster Characteristics

SKU-wise Model Selection
Filter by Model Type

All
Filter by Cluster

All
Forecast Explorer
Select a SKU to view forecast details

SKU_1
Model: HOLTWINTERS

Cluster: Seasonal Declining Volatile Regular

Forecast Accuracy

74.2%

Forecast Chart


Model Comparison


Forecast Metrics

Display Options


Select Models to Display

ARIMA
SARIMA
PROPHET
TypeError: unsupported operand type(s) for +: 'int' and 'str'
Traceback:
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/streamlit/runtime/scriptrunner/exec_code.py", line 121, in exec_func_with_error_handling
    result = func()
             ^^^^^^
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/streamlit/runtime/scriptrunner/script_runner.py", line 593, in code_to_exec
    exec(code, module.__dict__)
File "/home/runner/workspace/pages/01_Demand_Forecasting.py", line 575, in <module>
    forecast_fig = plot_forecast(st.session_state.sales_data, forecast_data, selected_sku, selected_models_for_viz)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/workspace/utils/visualization.py", line 184, in plot_forecast
    fig.add_vline(
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/plotly/graph_objs/_figure.py", line 1044, in add_vline
    return super(Figure, self).add_vline(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/plotly/basedatatypes.py", line 4087, in add_vline
    self._process_multiple_axis_spanning_shapes(
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/plotly/basedatatypes.py", line 4028, in _process_multiple_axis_spanning_shapes
    augmented_annotation = shapeannotation.axis_spanning_shape_annotation(
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/plotly/shapeannotation.py", line 216, in axis_spanning_shape_annotation
    shape_dict = annotation_params_for_line(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/plotly/shapeannotation.py", line 63, in annotation_params_for_line
    eX = _mean(X)
         ^^^^^^^^
File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/plotly/shapeannotation.py", line 7, in _mean
    return float(sum(x)) / len(x)
                 ^^^^^^